const ll MAXN=3e4+10;
vector<ll> tree[4*MAXN];

void build(ll a[], ll node, ll search_l, ll search_r){
    // root node = 1
    // search_l and search_r is 0-indexed
    if(search_l>=search_r) {
        tree[node]=vector<ll>(1,a[search_l]);
    }else{ 
        ll mid=(search_l+search_r)/2;
        build(a, node*2, search_l, mid);
        build(a, node*2+1, mid+1, search_r);
        merge(tree[node*2].begin(), tree[node*2].end(), 
        tree[node*2+1].begin(), tree[node*2+1].end(), back_inserter(tree[node]));
    }
}

ll VectorsValue(vector<ll>& v, ll k){
    // Here goes the algorithm for the value you want to extract
    ll n=v.size();
    auto it=upper_bound(v.begin(), v.end(), k);
    if(it==v.end()){
        return 0;
    }else{
        ll x=it-v.begin();
        return n-x;
    }
}

ll query(ll node, ll search_l, ll search_r, ll l, ll r, ll val) {
    // root node = 1
    // initial search_l = 0, search_r = 0, l= 0 indexed left pointer (inclusive)
    // l = 0 indexed left pointer (inclusive)
    // r = 0 indexed right pointer (inclusive)
    if (l>r) return 0;
    if (l==search_l && r==search_r) {
        return VectorsValue(tree[node],val);
    }
    ll mid=(search_l+search_r)/2;
    return query(node*2,search_l,mid,l,min(r,mid),val) + 
           query(node*2+1,mid+1,search_r,max(l,mid+1),r,val);
}
